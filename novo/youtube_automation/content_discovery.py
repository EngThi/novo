
#!/usr/bin/env python3
"""
Sistema Avan√ßado de Descoberta de Conte√∫do
Integra m√∫ltiplas fontes para descobrir tend√™ncias e t√≥picos relevantes
"""

import os
import sys
import json
import logging
import requests
import argparse
from pathlib import Path
from typing import List, Dict, Any
from datetime import datetime, timedelta
import google.generativeai as genai
from dotenv import load_dotenv

# Configura√ß√£o
load_dotenv()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configurar Gemini
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)

class ContentDiscovery:
    """Sistema inteligente de descoberta de conte√∫do"""
    
    def __init__(self):
        self.youtube_api_key = os.getenv('YOUTUBE_API_KEY')
        self.trending_topics = []
        
        # T√≥picos base para quando APIs n√£o est√£o dispon√≠veis
        self.fallback_topics = [
            "Mist√©rios n√£o resolvidos do Brasil",
            "Lendas urbanas brasileiras",
            "Casos criminais famosos",
            "Fen√¥menos paranormais",
            "Hist√≥ria oculta do Brasil",
            "Teorias conspirat√≥rias",
            "Lugares assombrados",
            "Desaparecimentos misteriosos"
        ]
    
    def get_youtube_trends(self) -> List[str]:
        """Obt√©m tend√™ncias do YouTube"""
        if not self.youtube_api_key:
            logger.warning("YouTube API key n√£o encontrada, usando t√≥picos padr√£o")
            return self.fallback_topics[:3]
        
        try:
            url = "https://www.googleapis.com/youtube/v3/videos"
            params = {
                'part': 'snippet',
                'chart': 'mostPopular',
                'regionCode': 'BR',
                'videoCategoryId': '25',  # Categoria: News & Politics
                'maxResults': 10,
                'key': self.youtube_api_key
            }
            
            response = requests.get(url, params=params)
            if response.status_code == 200:
                data = response.json()
                trends = [item['snippet']['title'] for item in data.get('items', [])]
                logger.info(f"‚úÖ {len(trends)} tend√™ncias obtidas do YouTube")
                return trends[:5]
            else:
                logger.warning(f"Erro na API do YouTube: {response.status_code}")
                return self.fallback_topics[:3]
                
        except Exception as e:
            logger.error(f"Erro ao obter tend√™ncias: {e}")
            return self.fallback_topics[:3]
    
    def analyze_trends_with_gemini(self, trends: List[str]) -> Dict[str, Any]:
        """Analisa tend√™ncias usando Gemini AI"""
        if not GEMINI_API_KEY:
            return self._create_fallback_analysis()
        
        try:
            model = genai.GenerativeModel('gemini-pro')
            
            prompt = f"""
            Analise as seguintes tend√™ncias e t√≥picos populares: {', '.join(trends)}
            
            Com base nessas tend√™ncias, sugira 3 t√≥picos espec√≠ficos para v√≠deos sobre mist√©rios brasileiros que:
            1. Sejam interessantes para o p√∫blico brasileiro
            2. Tenham potencial viral
            3. Sejam adequados para um canal de mist√©rios
            
            Para cada t√≥pico, forne√ßa:
            - T√≠tulo atrativo
            - Descri√ß√£o em 2-3 frases
            - Palavras-chave relevantes
            - N√≠vel de interesse (1-10)
            
            Retorne em formato JSON.
            """
            
            response = model.generate_content(prompt)
            
            # Extrair JSON da resposta
            content = response.text
            if '```json' in content:
                json_start = content.find('```json') + 7
                json_end = content.find('```', json_start)
                json_content = content[json_start:json_end].strip()
            else:
                json_content = content
            
            try:
                analysis = json.loads(json_content)
                logger.info("‚úÖ An√°lise de tend√™ncias gerada com Gemini")
                return analysis
            except json.JSONDecodeError:
                logger.warning("Resposta do Gemini n√£o est√° em formato JSON v√°lido")
                return self._create_fallback_analysis()
                
        except Exception as e:
            logger.error(f"Erro na an√°lise com Gemini: {e}")
            return self._create_fallback_analysis()
    
    def _create_fallback_analysis(self) -> Dict[str, Any]:
        """Cria an√°lise padr√£o quando APIs n√£o est√£o dispon√≠veis"""
        return {
            "topics": [
                {
                    "title": "O Mist√©rio da Cidade Perdida de Z",
                    "description": "A busca √©pica do explorador Percy Fawcett pela cidade perdida na Amaz√¥nia que custou sua vida e de sua expedi√ß√£o.",
                    "keywords": ["amazonia", "cidade perdida", "explora√ß√£o", "percy fawcett"],
                    "interest_level": 9
                },
                {
                    "title": "O Caso do Beb√™ Diabo de S√£o Paulo",
                    "description": "Em 1976, um caso chocou S√£o Paulo: uma crian√ßa nasceu com caracter√≠sticas estranhas e desapareceu misteriosamente.",
                    "keywords": ["s√£o paulo", "paranormal", "nascimento", "mist√©rio urbano"],
                    "interest_level": 8
                },
                {
                    "title": "A Maldi√ß√£o do Ouro de Minas Gerais",
                    "description": "Fam√≠lias inteiras desapareceram ap√≥s encontrar ouro em cavernas. Coincid√™ncia ou maldi√ß√£o ancestral?",
                    "keywords": ["minas gerais", "ouro", "maldi√ß√£o", "desaparecimento"],
                    "interest_level": 7
                }
            ],
            "generation_method": "fallback",
            "timestamp": datetime.now().isoformat()
        }
    
    def discover_content(self, output_dir: Path) -> Dict[str, Any]:
        """Processo completo de descoberta de conte√∫do"""
        logger.info("üîç Iniciando descoberta de conte√∫do...")
        
        # 1. Obter tend√™ncias
        trends = self.get_youtube_trends()
        
        # 2. Analisar com IA
        analysis = self.analyze_trends_with_gemini(trends)
        
        # 3. Selecionar melhor t√≥pico
        topics = analysis.get('topics', [])
        if topics:
            selected_topic = max(topics, key=lambda x: x.get('interest_level', 0))
        else:
            selected_topic = self.fallback_topics[0]
        
        # 4. Criar resultado
        result = {
            "discovered_trends": trends,
            "analysis": analysis,
            "selected_topic": selected_topic,
            "discovery_timestamp": datetime.now().isoformat(),
            "discovery_method": "automated_ai_analysis"
        }
        
        # 5. Salvar resultado
        discovery_file = output_dir / "content_discovery.json"
        with open(discovery_file, 'w', encoding='utf-8') as f:
            json.dump(result, f, indent=2, ensure_ascii=False)
        
        logger.info(f"‚úÖ Descoberta completa! T√≥pico selecionado: {selected_topic.get('title', selected_topic)}")
        return result

def main():
    """Fun√ß√£o principal para execu√ß√£o standalone"""
    parser = argparse.ArgumentParser(description='Descoberta de Conte√∫do')
    parser.add_argument('--output-dir', required=True, help='Diret√≥rio de sa√≠da')
    
    args = parser.parse_args()
    output_dir = Path(args.output_dir)
    
    # Criar diret√≥rio com todos os pais necess√°rios
    try:
        output_dir.mkdir(parents=True, exist_ok=True)
        logger.info(f"Diret√≥rio de sa√≠da criado/verificado: {output_dir}")
    except Exception as e:
        logger.error(f"Erro ao criar diret√≥rio {output_dir}: {e}")
        sys.exit(1)
    
    try:
        discovery = ContentDiscovery()
        result = discovery.discover_content(output_dir)
        
        topic_title = "T√≥pico selecionado"
        if isinstance(result.get('selected_topic'), dict):
            topic_title = result['selected_topic'].get('title', topic_title)
        elif isinstance(result.get('selected_topic'), str):
            topic_title = result['selected_topic']
        
        print(f"‚úÖ Descoberta conclu√≠da: {topic_title}")
        return 0
        
    except Exception as e:
        logger.error(f"Erro na descoberta de conte√∫do: {e}")
        print(f"‚ùå Erro na descoberta: {e}")
        return 1

if __name__ == "__main__":
    main()
