require('dotenv').config();
const { GoogleAuth } = require('google-auth-library');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const { PredictionServiceClient } = require('@google-cloud/aiplatform').v1;
const fs = require('fs').promises;
const path = require('path');

// --- Configura√ß√£o ---
const KEYFILEPATH = path.join(__dirname, 'google-drive-credentials.json');
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const PROJECT_ID = 'drive-uploader-466418'; // Seu Project ID do Google Cloud
const LOCATION = 'us-central1'; // Regi√£o da Vertex AI
const PUBLISHER = 'google';
const MODEL = 'imagegeneration@005'; // Modelo do Imagen (vers√£o mais est√°vel)
// --------------------

// --- Clientes de API ---
// Cliente para o Gemini (usando API Key para simplicidade)
if (!GEMINI_API_KEY) {
  console.error("Erro: A vari√°vel de ambiente GEMINI_API_KEY n√£o est√° definida.");
  process.exit(1);
}
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
const textModel = genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest"});

// Cliente para a Vertex AI (usando Conta de Servi√ßo para autentica√ß√£o)
const vertexAiClient = new PredictionServiceClient({
  keyFilename: KEYFILEPATH,
  apiEndpoint: `${LOCATION}-aiplatform.googleapis.com`,
});
// -----------------------


/**
 * Etapa 1: Descobre um t√≥pico de v√≠deo.
 */
async function descobrirConteudo() {
  console.log("üîç Etapa 1: Iniciando descoberta de conte√∫do...");
  const prompt = `Sugira um t√≥pico de v√≠deo sobre mist√©rios brasileiros que seja interessante e com potencial viral. Retorne apenas o t√≠tulo do t√≥pico.`;
  const result = await textModel.generateContent(prompt);
  const topic = result.response.text().trim();
  console.log(`‚úÖ T√≥pico descoberto: ${topic}`);
  return topic;
}

/**
 * Etapa 2: Gera um roteiro para o t√≥pico.
 */
async function gerarRoteiro(topic) {
  console.log(`\nüìù Etapa 2: Gerando roteiro para: "${topic}"...`);
  const prompt = `Crie um roteiro detalhado para um v√≠deo do YouTube com o t√≠tulo "${topic}". O roteiro deve ter cerca de 3 minutos, dividido em introdu√ß√£o, 3 se√ß√µes principais e uma conclus√£o.`;
  const result = await textModel.generateContent(prompt);
  const script = result.response.text();
  console.log("‚úÖ Roteiro gerado com sucesso.");
  await fs.writeFile(path.join(__dirname, 'output', 'roteiro.txt'), script);
  console.log("üíæ Roteiro salvo em 'output/roteiro.txt'");
  return script;
}

/**
 * Etapa 3: Cria prompts de imagem a partir do roteiro.
 */
async function criarPromptsDeImagem(script) {
  console.log("\nüé® Etapa 3: Analisando roteiro para criar prompts de imagem...");
  const prompt = `
    Sua tarefa √© analisar um roteiro de v√≠deo e gerar prompts para um modelo de imagem.
    Analise o roteiro dentro das tags <roteiro>${script}</roteiro>.
    Extraia 5 cenas visuais cruciais. Para cada cena, crie um prompt em ingl√™s, detalhado e com estilo cinematogr√°fico e de mist√©rio.
    **Sua resposta deve ser APENAS um array JSON contendo 5 strings.** N√£o inclua nenhuma outra informa√ß√£o ou texto.
    Exemplo de sa√≠da:
    [
      "cinematic photo of a vast, misty Amazon rainforest at dawn, hyper-realistic",
      "close-up of an ancient, weathered map showing a lost city, illuminated by a single torch",
      "a blurry, mysterious creature moving between ancient trees in a dark, foggy jungle, found footage style",
      "eerie, glowing lights hovering over a calm river in the middle of the Amazon night, long exposure shot",
      "a team of explorers looking at a massive, overgrown stone ruin deep within the jungle, dramatic lighting"
    ]
  `;
  const result = await textModel.generateContent(prompt);
  // Limpeza robusta para extrair o JSON, mesmo que a API adicione ```json
  let jsonString = result.response.text().trim();
  const jsonMatch = jsonString.match(/\[(.*?)\]/s);
  if (jsonMatch && jsonMatch[0]) {
      jsonString = jsonMatch[0];
  } else {
      throw new Error("A resposta da API n√£o continha um array JSON v√°lido.");
  }

  try {
    const prompts = JSON.parse(jsonString);
    console.log(`‚úÖ ${prompts.length} prompts de imagem criados.`);
    return prompts;
  } catch (e) {
      console.error("Falha ao analisar o JSON da API. Resposta recebida:", jsonString);
      throw e;
  }
}

const { helpers } = require('@google-cloud/aiplatform');
// ... (c√≥digo anterior) ...
/**
 * Etapa 4: Gera imagens reais usando a API da Vertex AI (Imagen).
 */
async function gerarImagens(prompts) {
  console.log("\nüñºÔ∏è Etapa 4: Gerando imagens com Vertex AI (Imagen)...");
  const imageDir = path.join(__dirname, 'output', 'images');
  await fs.mkdir(imageDir, { recursive: true });

  const endpoint = `projects/${PROJECT_ID}/locations/${LOCATION}/publishers/${PUBLISHER}/models/${MODEL}`;

  for (let i = 0; i < prompts.length; i++) {
    const promptText = prompts[i];
    console.log(`   -> Gerando imagem para o prompt: "${promptText.substring(0, 50)}..."`);

    const instance = helpers.toValue({ prompt: promptText });
    const parameters = helpers.toValue({ sampleCount: 1 });

    const request = {
      endpoint,
      instances: [instance],
      parameters: parameters,
    };

    try {
      const [response] = await vertexAiClient.predict(request);
      const imageBase64 = response.predictions[0].structValue.fields.bytesBase64Encoded.stringValue;
      const imageBuffer = Buffer.from(imageBase64, 'base64');
      const filePath = path.join(imageDir, `image_${i + 1}.png`);
      await fs.writeFile(filePath, imageBuffer);
      console.log(`   ‚úÖ Imagem salva em: ${filePath}`);
    } catch (error) {
      console.error(`   ‚ùå Erro ao gerar imagem para o prompt ${i + 1}:`, error.details || error.message);
    }
  }
}

/**
 * Fun√ß√£o principal que orquestra o pipeline.
 */
async function executarPipeline() {
  console.log("üöÄ Iniciando pipeline de automa√ß√£o de v√≠deos em Node.js...");
  try {
    await fs.mkdir(path.join(__dirname, 'output'), { recursive: true });
    const topic = await descobrirConteudo();
    const script = await gerarRoteiro(topic);
    const imagePrompts = await criarPromptsDeImagem(script);
    await gerarImagens(imagePrompts);

    console.log("\nüéôÔ∏è Etapa 5: Gera√ß√£o de Narra√ß√£o (TODO)");
    console.log("\nüéûÔ∏è Etapa 6: Montagem de V√≠deo (TODO)");
    console.log("\n‚òÅÔ∏è Etapa 7: Upload para Google Drive (TODO)");
    console.log("\nüéâ Pipeline de gera√ß√£o de texto e imagens conclu√≠do com sucesso!");
  } catch (error) {
    console.error("\nüî• Pipeline falhou!", error.message || error);
    process.exit(1);
  }
}

executarPipeline();