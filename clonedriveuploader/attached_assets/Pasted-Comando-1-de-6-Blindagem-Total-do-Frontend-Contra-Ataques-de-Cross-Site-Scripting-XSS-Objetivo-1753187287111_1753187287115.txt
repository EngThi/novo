Comando 1 de 6: Blindagem Total do Frontend Contra Ataques de Cross-Site Scripting (XSS)

Objetivo Estratégico: Este comando é dedicado, com foco absoluto, a erradicar a classe de vulnerabilidade mais crítica e de maior impacto direto ao usuário encontrada no projeto: o Cross-Site Scripting (XSS). Vamos isolar e corrigir todas as instâncias identificadas no código do lado do cliente (frontend), garantindo que nenhum dado de fontes externas possa ser usado para injetar e executar scripts maliciosos no navegador dos usuários da aplicação.

Análise Forense das Vulnerabilidades de XSS Identificadas

O scanner de segurança identificou dois pontos distintos no mesmo arquivo onde a aplicação está vulnerável a ataques de XSS. Ambos são causados pelo uso inseguro da propriedade innerHTML.

Vulnerabilidade A: Injeção de XSS na Exibição de Informações do Usuário

Alerta do Scanner:

"XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like \innerHTML`... is an anti-pattern that can lead to XSS vulnerabilities..."`

Localização Precisa:

drive-uploader/frontend/script.js

Trecho de Código Vulnerável:

JavaScript



// Ponto de injeção Adocument.getElementById('user-info').innerHTML = `

  <img src="${payload.picture}" alt="Avatar">

  Olá, ${payload.name}

`;

Cenário de Ataque (Exploit):

Um atacante se autentica via Google e previamente altera seu nome de perfil para um payload malicioso.

Nome do Atacante: Fulano<img src=x onerror="alert('Sessão Roubada: ' + document.cookie)">

Resultado: Quando o código acima é executado, o navegador renderiza o HTML e executa o JavaScript contido no atributo onerror, que neste caso simula o roubo dos cookies de sessão do usuário logado.

Vulnerabilidade B: Injeção de XSS na Exibição de Mensagens de Erro

Alerta do Scanner:

"XSS Vulnerability: Unsafe DOM Manipulation. User controlled data in methods like \innerHTML`... is an anti-pattern..."`

Localização Precisa:

drive-uploader/frontend/script.js

Trecho de Código Vulnerável:

JavaScript



// Ponto de injeção Bdocument.body.innerHTML = `

  <div style="...">

    ...

    <p>${message}</p>

    ...

  </div>

`;

Cenário de Ataque (Exploit):

O atacante força a aplicação a gerar um erro cuja mensagem contenha dados que ele controla (por exemplo, um parâmetro de URL ou um nome de arquivo inválido que é refletido na mensagem de erro da API).

Ação do Atacante: Acessa uma URL como https://seu-repl-url/?error_msg=<script>window.location='http://site-falso.com/login-google'</script>

Resultado: Se a variável message for populada com o parâmetro error_msg, o innerHTML executará o script, redirecionando a vítima para uma página de phishing idêntica à do Google para roubar suas credenciais.

Plano de Ação Unificado para a Correção do script.js

Para resolver ambas as vulnerabilidades de forma definitiva e elegante, vamos refatorar o código para nunca usar innerHTML com dados dinâmicos, adotando funções seguras e reutilizáveis.

Passo 1: Refatoração para Funções de Renderização Segura

Abra o arquivo drive-uploader/frontend/script.js. Em vez de fazer correções pontuais, vamos criar duas funções dedicadas e seguras, uma para renderizar as informações do usuário e outra para exibir erros.

Passo 2: Implementação do Código Corrigido e Seguro

Substitua toda a lógica de manipulação de innerHTML pelo código abaixo. Ele demonstra a criação segura de cada elemento do DOM.

JavaScript



// ===================================================================================// VERSÃO SEGURA E REATORADA DO SCRIPT.JS (ou das funções relevantes)// ===================================================================================/**

 * Renderiza de forma segura as informações do usuário no elemento #user-info.

 * @param {object} payload - O objeto contendo os dados do usuário (name, picture).

 */function renderUserInfo(payload) {

  const userInfoDiv = document.getElementById('user-info');

  if (!userInfoDiv) return;



  // Limpa o conteúdo anterior de forma segura

  userInfoDiv.innerHTML = '';



  // Cria o elemento <img>

  const img = document.createElement('img');

  // Validação de URL como boa prática (defesa em profundidade)

  if (payload.picture && (payload.picture.startsWith('https://') || payload.picture.startsWith('http://'))) {

    img.src = payload.picture;

  }

  img.alt = 'Avatar';



  // Cria o nó de texto para a saudação (imune a XSS)

  const textNode = document.createTextNode(` Olá, ${payload.name}`);



  // Anexa os elementos seguros ao DOM

  userInfoDiv.appendChild(img);

  userInfoDiv.appendChild(textNode);

}/**

 * Exibe uma mensagem de erro em tela cheia de forma segura.

 * @param {string} message - A mensagem de erro a ser exibida.

 */function displayGlobalError(message) {

  // Limpa o corpo da página de forma segura

  document.body.innerHTML = '';



  // Cria os elementos um a um

  const container = document.createElement('div');

  container.style.textAlign = 'center';

  container.style.padding = '50px';

  container.style.fontFamily = 'Arial, sans-serif';



  const heading = document.createElement('h2');

  heading.style.color = '#ea4335';

  heading.textContent = '⚠️ Erro na Aplicação';



  const messageParagraph = document.createElement('p');

  // PONTO CRÍTICO DA CORREÇÃO:

  // 'textContent' trata a string 'message' como texto puro,

  // neutralizando qualquer tag HTML ou script que ela possa conter.

  messageParagraph.textContent = message;



  const helpParagraph = document.createElement('p');

  helpParagraph.style.color = '#666';

  helpParagraph.style.marginTop = '20px';

  helpParagraph.textContent = 'Verifique a configuração ou tente novamente mais tarde.';



  // Constrói a hierarquia de elementos e a anexa ao body

  container.appendChild(heading);

  container.appendChild(messageParagraph);

  container.appendChild(helpParagraph);

  document.body.appendChild(container);

}// EXEMPLO DE COMO VOCÊ USARIA AS NOVAS FUNÇÕES NO SEU CÓDIGO:// Onde você recebia os dados do usuário e usava innerHTML:// onSignIn(googleUser) { ... renderUserInfo(payload); ... }// Onde você detectava um erro e usava innerHTML:// .catch(error => { displayGlobalError('Falha ao comunicar com o servidor: ' + error.message); });

Princípio de Segurança Fundamental: "Nunca Confie na Entrada"

Este comando implementa na prática um dos princípios mais importantes da segurança da informação: Never Trust Input (Nunca Confie na Entrada). Ao usar métodos como createElement e textContent, estamos explicitamente dizendo ao navegador: "Trate esta informação que veio de uma fonte externa como mero texto, sem poder de execução". Isso cria uma barreira (um "escape" de contexto) que é a defesa fundamental contra ataques de Cross-Site Scripting.